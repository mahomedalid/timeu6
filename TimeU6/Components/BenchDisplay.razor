@using TimeU6.Models
@using TimeU6.Services
@namespace TimeU6.Components
@inject IMatchService MatchService
@inject MatchState MatchState

@* Component to display bench players with substitution controls *@
<div class="bench-display">
    <div class="card h-100">
        <div class="card-header bg-warning text-dark">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">
                    <i class="bi bi-people"></i> Bench
                </h4>
                <span class="badge bg-dark text-warning fs-6">
                    @BenchPlayers.Count available
                </span>
            </div>
            @if (!string.IsNullOrEmpty(Title))
            {
                <small class="opacity-75">@Title</small>
            }
        </div>
        
        <div class="card-body">
            @if (!BenchPlayers.Any())
            {
                <div class="text-center text-muted py-4">
                    <i class="bi bi-person-x display-4 mb-3 opacity-50"></i>
                    <h5>No Players Available</h5>
                    <p class="mb-0">
                        @if (AllPresentPlayers.Count == 0)
                        {
                            @:No players marked as present
                        }
                        else
                        {
                            @:All present players are on the field
                        }
                    </p>
                </div>
            }
            else
            {
                <!-- Quick Actions Bar -->
                @if (ShowQuickActions && BenchPlayers.Count > 1)
                {
                    <div class="mb-3 p-2 bg-light rounded">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted fw-bold">Quick Actions:</small>
                            <div class="btn-group btn-group-sm" role="group">
                                <button class="btn btn-outline-primary" 
                                        @onclick="SelectLeastPlayedPlayer"
                                        title="Select player with least playing time">
                                    <i class="bi bi-arrow-up"></i> Least Played
                                </button>
                                <button class="btn btn-outline-info" 
                                        @onclick="RotateAllPlayers"
                                        disabled="@(!CanRotateAll)"
                                        title="Rotate all bench players in">
                                    <i class="bi bi-arrow-repeat"></i> Rotate All
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <div class="row g-3">
                    @foreach (var player in GetSortedBenchPlayers())
                    {
                        <div class="col-md-6 @(BenchPlayers.Count <= 3 ? "col-lg-12" : "col-lg-6")">
                            <div class="card border-warning @(selectedPlayerId == player.Id ? "bg-warning bg-opacity-25 border-3" : "bg-warning bg-opacity-10")">
                                <div class="card-body p-3">
                                    <!-- Player Header -->
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title mb-1 fw-bold">@player.Name</h6>
                                            <div class="d-flex align-items-center gap-2">
                                                <span class="badge bg-warning text-dark">#@player.Number</span>
                                                <span class="badge @GetPlayerStatusBadge(player)">@GetPlayerStatus(player)</span>
                                            </div>
                                        </div>
                                        
                                        @if (ShowPlayerPhotos && !string.IsNullOrEmpty(GetPlayerPhoto(player)))
                                        {
                                            <img src="@GetPlayerPhoto(player)" 
                                                 class="rounded-circle" 
                                                 width="40" 
                                                 height="40" 
                                                 alt="@player.Name">
                                        }
                                    </div>

                                    <!-- Playing Time Display -->
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Total Playing Time:</small>
                                            <strong class="@GetPlayingTimeClass(player)">@player.PlayingTime.ToString(@"mm\:ss")</strong>
                                        </div>
                                        
                                        @if (ShowRestTime)
                                        {
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">Rest Time:</small>
                                                <small class="text-info">@GetRestTime(player).ToString(@"mm\:ss")</small>
                                            </div>
                                        }
                                        
                                        @if (ShowPlayingTimeComparison)
                                        {
                                            <div class="progress mt-1" style="height: 4px;">
                                                <div class="progress-bar @GetComparisonProgressClass(player)" 
                                                     role="progressbar" 
                                                     style="width: @GetComparisonProgressPercentage(player)%" 
                                                     title="Compared to team average">
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <!-- Action Buttons -->
                                    @if (ShowActions)
                                    {
                                        <div class="d-grid gap-2">
                                            <button class="btn @GetSubstituteInButtonClass(player)" 
                                                    @onclick="() => HandleSubstituteIn(player.Id)"
                                                    disabled="@(!CanSubstituteIn || (!CanAddToField && selectedPlayerId != player.Id))">
                                                <i class="bi bi-arrow-up-circle"></i> 
                                                @if (CanAddToField)
                                                {
                                                    @:Add to Field
                                                }
                                                else if (selectedPlayerId == player.Id)
                                                {
                                                    @:Selected - Choose who to replace
                                                }
                                                else
                                                {
                                                    @:Select for Substitution
                                                }
                                            </button>
                                            
                                            @if (ShowAdditionalActions)
                                            {
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-info" 
                                                            @onclick="() => OnPlayerInfo.InvokeAsync(player.Id)"
                                                            title="Player Info">
                                                        <i class="bi bi-info-circle"></i>
                                                    </button>
                                                    
                                                    @if (AllowTimeAdjustment)
                                                    {
                                                        <button class="btn btn-outline-secondary" 
                                                                @onclick="() => OnAdjustTime.InvokeAsync(player.Id)"
                                                                title="Adjust Time">
                                                            <i class="bi bi-clock-history"></i>
                                                        </button>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (selectedPlayerId == player.Id && !CanAddToField)
                                    {
                                        <div class="mt-2">
                                            <small class="text-info">
                                                <i class="bi bi-info-circle"></i>
                                                Field is full. Click a player on the field to substitute.
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @if (ShowBenchSummary)
                {
                    <hr>
                    <div class="row text-center g-3">
                        <div class="col">
                            <div class="text-muted small">Bench Average Time</div>
                            <div class="fw-bold text-warning">@GetBenchAveragePlayingTime().ToString(@"mm\:ss")</div>
                        </div>
                        <div class="col">
                            <div class="text-muted small">Next Recommended</div>
                            <div class="fw-bold text-success">
                                @{
                                    var nextPlayer = GetLeastPlayedPlayer();
                                }
                                @if (nextPlayer != null)
                                {
                                    @nextPlayer.Name
                                }
                                else
                                {
                                    @:None
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Player> BenchPlayers { get; set; } = new();
    [Parameter] public List<Player> AllPresentPlayers { get; set; } = new();
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowAdditionalActions { get; set; } = false;
    [Parameter] public bool ShowQuickActions { get; set; } = true;
    [Parameter] public bool ShowPlayingTimeComparison { get; set; } = true;
    [Parameter] public bool ShowBenchSummary { get; set; } = true;
    [Parameter] public bool ShowPlayerPhotos { get; set; } = false;
    [Parameter] public bool ShowRestTime { get; set; } = true;
    [Parameter] public bool CanSubstituteIn { get; set; } = true;
    [Parameter] public bool CanAddToField { get; set; } = true;
    [Parameter] public bool CanRotateAll { get; set; } = true;
    [Parameter] public bool AllowTimeAdjustment { get; set; } = false;

    [Parameter] public EventCallback<Guid> OnSubstituteIn { get; set; }
    [Parameter] public EventCallback<Guid> OnPlayerInfo { get; set; }
    [Parameter] public EventCallback<Guid> OnAdjustTime { get; set; }
    [Parameter] public EventCallback OnRotateAll { get; set; }

    private Guid? selectedPlayerId = null;

    private async Task HandleSubstituteIn(Guid playerId)
    {
        if (CanAddToField)
        {
            await OnSubstituteIn.InvokeAsync(playerId);
        }
        else
        {
            // Field is full, select player for substitution
            selectedPlayerId = selectedPlayerId == playerId ? null : playerId;
        }
        StateHasChanged();
    }

    private async Task SelectLeastPlayedPlayer()
    {
        var leastPlayed = GetLeastPlayedPlayer();
        if (leastPlayed != null)
        {
            await HandleSubstituteIn(leastPlayed.Id);
        }
    }

    private async Task RotateAllPlayers()
    {
        await OnRotateAll.InvokeAsync();
    }

    private List<Player> GetSortedBenchPlayers()
    {
        return BenchPlayers.OrderBy(p => p.PlayingTime).ThenBy(p => p.Name).ToList();
    }

    private Player? GetLeastPlayedPlayer()
    {
        return BenchPlayers.OrderBy(p => p.PlayingTime).FirstOrDefault();
    }

    private TimeSpan GetBenchAveragePlayingTime()
    {
        if (!BenchPlayers.Any())
            return TimeSpan.Zero;

        var totalTime = BenchPlayers.Sum(p => p.PlayingTime.TotalSeconds);
        return TimeSpan.FromSeconds(totalTime / BenchPlayers.Count);
    }

    private TimeSpan GetTeamAveragePlayingTime()
    {
        if (!AllPresentPlayers.Any())
            return TimeSpan.Zero;

        var totalTime = AllPresentPlayers.Sum(p => p.PlayingTime.TotalSeconds);
        return TimeSpan.FromSeconds(totalTime / AllPresentPlayers.Count);
    }

    private TimeSpan GetRestTime(Player player)
    {
        // Calculate time since player was last on field
        // This is a simplified calculation - in a real app you'd track this more precisely
        return MatchState.GetElapsedTime() - player.PlayingTime;
    }

    private string GetPlayerStatus(Player player)
    {
        return "Available";
    }

    private string GetPlayerStatusBadge(Player player)
    {
        return "bg-success text-white";
    }

    private string GetPlayingTimeClass(Player player)
    {
        var teamAverage = GetTeamAveragePlayingTime();
        if (teamAverage == TimeSpan.Zero)
            return "text-dark";

        var ratio = player.PlayingTime.TotalSeconds / teamAverage.TotalSeconds;
        
        if (ratio >= 1.1)
            return "text-success";
        if (ratio <= 0.9)
            return "text-warning";
        
        return "text-dark";
    }

    private string GetSubstituteInButtonClass(Player player)
    {
        if (selectedPlayerId == player.Id)
            return "btn-warning";
        
        if (CanAddToField)
            return "btn-outline-success";
        
        return "btn-outline-primary";
    }

    private string GetComparisonProgressClass(Player player)
    {
        var teamAverage = GetTeamAveragePlayingTime();
        if (teamAverage == TimeSpan.Zero)
            return "bg-secondary";

        var ratio = player.PlayingTime.TotalSeconds / teamAverage.TotalSeconds;
        
        if (ratio >= 1.1)
            return "bg-success";
        if (ratio <= 0.9)
            return "bg-danger";
        
        return "bg-warning";
    }

    private int GetComparisonProgressPercentage(Player player)
    {
        var teamAverage = GetTeamAveragePlayingTime();
        if (teamAverage == TimeSpan.Zero)
            return 0;

        var ratio = player.PlayingTime.TotalSeconds / teamAverage.TotalSeconds;
        return (int)(ratio * 100);
    }

    private string GetPlayerPhoto(Player player)
    {
        // Placeholder for future player photo functionality
        return string.Empty;
    }

    public void ClearSelection()
    {
        selectedPlayerId = null;
        StateHasChanged();
    }

    public Guid? GetSelectedPlayer()
    {
        return selectedPlayerId;
    }
}