@using TimeU6.Models
@using TimeU6.Services
@namespace TimeU6.Components
@implements IDisposable
@inject IMatchService MatchService
@inject MatchState MatchState

@* Reusable match timer component with full timer control functionality *@
<div class="match-timer">
    <div class="card bg-light border-primary">
        <div class="card-body text-center">
            <div class="row g-3 align-items-center">
                <!-- Elapsed Time Display -->
                <div class="col-md-4">
                    <h2 class="display-4 fw-bold text-primary mb-0">
                        @GetElapsedTime().ToString(@"mm\:ss")
                    </h2>
                    <small class="text-muted">Elapsed Time</small>
                </div>
                
                <!-- Timer Controls -->
                <div class="col-md-4">
                    <div class="btn-group" role="group" aria-label="Timer controls">
                        @if (!MatchState.IsMatchActive && !MatchState.MatchStartTime.HasValue)
                        {
                            <button class="btn btn-success btn-lg" 
                                    @onclick="StartTimer" 
                                    title="Start Match">
                                <i class="bi bi-play-fill"></i> Start
                            </button>
                        }
                        else if (!MatchState.IsMatchActive)
                        {
                            <button class="btn btn-success btn-lg" 
                                    @onclick="ResumeTimer" 
                                    title="Resume Match">
                                <i class="bi bi-play-fill"></i> Resume
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-lg" 
                                    @onclick="PauseTimer" 
                                    title="Pause Match">
                                <i class="bi bi-pause-fill"></i> Pause
                            </button>
                        }
                        
                        <button class="btn btn-secondary btn-lg" 
                                @onclick="ResetTimer" 
                                @onclick:preventDefault="true"
                                title="Reset Match">
                            <i class="bi bi-arrow-clockwise"></i> Reset
                        </button>
                    </div>
                </div>
                
                <!-- Remaining Time Display -->
                <div class="col-md-4">
                    <h3 class="display-6 fw-bold text-info mb-0">
                        @GetRemainingTime().ToString(@"mm\:ss")
                    </h3>
                    <small class="text-muted">Remaining (@((int)MatchState.MatchDuration.TotalMinutes) min match)</small>
                </div>
            </div>

            <!-- Match Status Indicator -->
            <div class="mt-3">
                <span class="badge fs-6 p-2 @GetStatusBadgeClass()">
                    <i class="bi @GetStatusIcon()"></i>
                    @GetMatchStatus()
                </span>
                
                @if (ShowMatchProgress)
                {
                    <div class="progress mt-2" style="height: 8px;">
                        <div class="progress-bar @GetProgressBarClass()" 
                             role="progressbar" 
                             style="width: @GetProgressPercentage()%" 
                             aria-valuenow="@GetProgressPercentage()" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                        </div>
                    </div>
                }
            </div>

            @if (ShowTimeWarnings && GetTimeWarning() != null)
            {
                <div class="alert alert-warning alert-sm mt-3 mb-0" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    @GetTimeWarning()
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool ShowMatchProgress { get; set; } = true;
    [Parameter] public bool ShowTimeWarnings { get; set; } = true;
    [Parameter] public EventCallback OnTimerStarted { get; set; }
    [Parameter] public EventCallback OnTimerPaused { get; set; }
    [Parameter] public EventCallback OnTimerResumed { get; set; }
    [Parameter] public EventCallback OnTimerReset { get; set; }
    [Parameter] public EventCallback<TimeSpan> OnTimeUpdate { get; set; }

    private System.Threading.Timer? updateTimer;
    private bool disposed = false;

    protected override void OnInitialized()
    {
        // Start update timer if match is active
        if (MatchState.IsMatchActive)
        {
            StartUpdateTimer();
        }
    }

    private async Task StartTimer()
    {
        MatchService.StartMatch();
        StartUpdateTimer();
        await OnTimerStarted.InvokeAsync();
        StateHasChanged();
    }

    private async Task PauseTimer()
    {
        MatchService.PauseMatch();
        StopUpdateTimer();
        await OnTimerPaused.InvokeAsync();
        StateHasChanged();
    }

    private async Task ResumeTimer()
    {
        MatchService.ResumeMatch();
        StartUpdateTimer();
        await OnTimerResumed.InvokeAsync();
        StateHasChanged();
    }

    private async Task ResetTimer()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to reset the match? This will clear all playing times.");
        if (confirmed)
        {
            MatchService.ResetMatch();
            StopUpdateTimer();
            await OnTimerReset.InvokeAsync();
            StateHasChanged();
        }
    }

    private void StartUpdateTimer()
    {
        StopUpdateTimer(); // Ensure no duplicate timers
        updateTimer = new System.Threading.Timer(async _ =>
        {
            if (MatchState.IsMatchActive)
            {
                await InvokeAsync(async () =>
                {
                    var elapsed = GetElapsedTime();
                    await OnTimeUpdate.InvokeAsync(elapsed);
                    StateHasChanged();
                });
            }
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private void StopUpdateTimer()
    {
        updateTimer?.Dispose();
        updateTimer = null;
    }

    private TimeSpan GetElapsedTime()
    {
        return MatchService.GetElapsedTime();
    }

    private TimeSpan GetRemainingTime()
    {
        return MatchState.GetRemainingTime();
    }

    private string GetMatchStatus()
    {
        if (!MatchState.MatchStartTime.HasValue)
            return "NOT STARTED";
        
        return MatchState.IsMatchActive ? "ACTIVE" : "PAUSED";
    }

    private string GetStatusBadgeClass()
    {
        if (!MatchState.MatchStartTime.HasValue)
            return "bg-secondary";
        
        return MatchState.IsMatchActive ? "bg-success" : "bg-warning text-dark";
    }

    private string GetStatusIcon()
    {
        if (!MatchState.MatchStartTime.HasValue)
            return "bi-stop-circle";
        
        return MatchState.IsMatchActive ? "bi-play-circle-fill" : "bi-pause-circle-fill";
    }

    private string GetProgressBarClass()
    {
        var remaining = GetRemainingTime();
        if (remaining.TotalMinutes <= 5)
            return "bg-danger";
        if (remaining.TotalMinutes <= 10)
            return "bg-warning";
        return "bg-success";
    }

    private int GetProgressPercentage()
    {
        if (!MatchState.MatchStartTime.HasValue)
            return 0;

        var elapsed = GetElapsedTime();
        var total = MatchState.MatchDuration;
        
        if (total.TotalSeconds <= 0)
            return 0;

        var percentage = (int)((elapsed.TotalSeconds / total.TotalSeconds) * 100);
        return Math.Min(percentage, 100);
    }

    private string? GetTimeWarning()
    {
        if (!MatchState.IsMatchActive)
            return null;

        var remaining = GetRemainingTime();
        
        if (remaining.TotalSeconds <= 0)
            return "⏰ Match time expired! Consider ending the match.";
        
        if (remaining.TotalMinutes <= 2)
            return $"⏰ Only {remaining:mm\\:ss} remaining in match!";
        
        if (remaining.TotalMinutes <= 5)
            return $"⚠️ {remaining:mm\\:ss} remaining - consider final substitutions.";

        return null;
    }

    public void Dispose()
    {
        if (!disposed)
        {
            StopUpdateTimer();
            disposed = true;
        }
    }
}

@inject IJSRuntime JSRuntime